generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DRIVER
  PASSENGER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum RideRequestStatus {
  WAITING
  COMPLETED
  CANCELLED
}

enum ConnectedRideStatus {
  WAITING
  DRIVING
  COMPLETED
  CANCELLED_BY_DRIVER
  CANCELLED_BY_PASSENGER
}

enum NotificationType {
  MESSAGE
  SYSTEM_ALERT
  PAYMENT
  RIDE_UPDATE
  REVIEW
  PROMOTIONAL
}

enum PaymentMethod {
  CASH
  CARD
  WALLET
}

model RefreshToken {
  userId String
  user User @relation(fields: [userId], references: [id])
  token String @unique
}

enum KosovoCity {
  PRISHTINE           @map("Prishtinë")
  PRIZREN             @map("Prizren")
  FERIZAJ             @map("Ferizaj")
  GJAKOVE             @map("Gjakovë")
  PEJE                @map("Pejë")
  MITROVICE           @map("Mitrovicë")
  GJILAN              @map("Gjilan")
  PODUJEVE            @map("Podujevë")
  OBILIQ              @map("Obiliq")
  FUSHE_KOSOVE        @map("Fushë Kosovë")
  DRENAS              @map("Drenas")
  SKENDERAJ           @map("Skenderaj")
  VUSHTRRI            @map("Vushtrri")
  LIPJAN              @map("Lipjan")
  SHTIME              @map("Shtime")
  SUHAREKE            @map("Suharekë")
  RAHOVEC             @map("Rahovec")
  DRAGASH             @map("Dragash")
  MALISHEVE           @map("Malishevë")
  KACANIK             @map("Kaçanik")
  HANI_I_ELEZIT       @map("Hani i Elezit")
  KAMENICE            @map("Kamenicë")
  VITI                @map("Viti")
  GRACANICE           @map("Graçanicë")
  SHTERPCE            @map("Shtërpcë")
  KLLOKOT             @map("Kllokot")
  NOVOBERDE           @map("Novobërdë")
  RANILLUG            @map("Ranillug")
  PARTESH             @map("Partesh")
  JUNIK               @map("Junik")
  KLINE               @map("Klinë")
  ISTOG               @map("Istog")
  DECAN               @map("Deçan")
  ZUBIN_POTOK         @map("Zubin Potok")
  ZVECAN              @map("Zveçan")
  LEPOSAVIQ           @map("Leposaviq")
  MITROVICE_E_VERIUT  @map("Mitrovicë e Veriut")
  MAMUSHE             @map("Mamushë")
}

enum Gender {
  MALE
  FEMALE
  RATHER_NOT_SAY
}


model User {
  id             String              @id @default(uuid())
  email          String              @unique
  fullName       String
  password       String
  role           Role                @default(DRIVER)
  user_verified  Boolean             @default(false)
  image String

  // Relations
  refreshToken RefreshToken[]
  userInformation    UserInformation?
  ridesAsDriver      ConnectedRide[] @relation("DriverRides")
  ridesAsPassenger   ConnectedRide[] @relation("PassengerRides")
  rideRequests       RideRequest[]   @relation("PassengerRequests")
  acceptedRequests   RideRequest[]   @relation("DriverAcceptedRequests")
  preferredDrivers   PreferredDriver[] @relation("PassengerToDriver")
  preferredByUsers   PreferredDriver[] @relation("DriverToPassenger")

  driverConversations Conversations[] @relation("driverConversations")
  passengerConversations Conversations[] @relation("passengerConversations")
  sendedMessages Message[]

  rotations          PassengerRotation[]
  notifications      Notification[]
  driverEarnings     DriverEarning[]
  passengerPayments  PassengerPayment[]
  driverFixedTarifs DriverFixedTarifs[]

  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  @@index([fullName])
  @@index([role])
}

model UserInformation {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  ID_Card     String[]
  SelfiePhoto String
  address String
  city KosovoCity
  gender Gender
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([city])
  @@index([userId])
}

model DriverFixedTarifs {
  id String @id @default(uuid())
  user User  @relation(fields: [userId], references: [id])
  userId String
  fixedTarifTitle String
  city KosovoCity
  locationArea String
  price Decimal @db.Decimal(10,2)
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RideRequest {
  id            String            @id @default(uuid())
  passenger     User              @relation(fields: [passengerId], references: [id], name: "PassengerRequests", onDelete: Cascade)
  passengerId   String
  driver        User?             @relation(fields: [driverId], references: [id], name: "DriverAcceptedRequests", onDelete: SetNull)
  driverId      String?
  price         Decimal           @db.Decimal(10,2)
  fromAddress   String
  toAddress     String
  status        RideRequestStatus @default(WAITING)
  connectedRide ConnectedRide?
  rideRequestConversation Conversations?

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([passengerId])
  @@index([driverId])
  @@index([status])
  @@index([createdAt])
  @@index([status, createdAt])
}

model ConnectedRide {
  id              String           @id @default(uuid())
  driver          User             @relation(fields: [driverId], references: [id], name: "DriverRides", onDelete: Cascade)
  driverId        String
  passenger       User             @relation(fields: [passengerId], references: [id], name: "PassengerRides", onDelete: Cascade)
  passengerId     String
  rideRequest     RideRequest      @relation(fields: [rideRequestId], references: [id], onDelete: Cascade)
  rideRequestId   String           @unique
  status          ConnectedRideStatus @default(WAITING)
  driverEarning   DriverEarning?
  passengerPayment PassengerPayment?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([driverId, passengerId])
  @@index([status, driverId])
  @@index([status])
  @@index([createdAt])
}

model DriverEarning {
  id            String         @id @default(uuid())
  driver        User           @relation(fields: [driverId], references: [id], onDelete: Cascade)
  driverId      String
  ride          ConnectedRide  @relation(fields: [rideId], references: [id], onDelete: Cascade)
  rideId        String         @unique
  amount        Decimal        @db.Decimal(10,2)
  fee           Decimal        @db.Decimal(10,2)
  netEarnings   Decimal        @db.Decimal(10,2)
  status        PaymentStatus  @default(PAID)
  paymentDate   DateTime?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status])
  @@index([paymentDate])
}

model PassengerPayment {
  id            String         @id @default(uuid())
  passenger     User           @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId   String
  ride          ConnectedRide  @relation(fields: [rideId], references: [id], onDelete: Cascade)
  rideId        String         @unique
  amount        Decimal        @db.Decimal(10,2)
  surcharge     Decimal?       @db.Decimal(10,2)
  totalPaid     Decimal        @db.Decimal(10,2)
  paymentMethod PaymentMethod
  status        PaymentStatus  @default(PAID)
  paidAt        DateTime?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status])
  @@index([paidAt])
}

model PassengerRotation {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  fromAddress  String
  toAddress    String
  days         String?     // e.g. ["MON", "WED", "FRI"]
  time         DateTime?

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Notification {
  id          String           @id @default(uuid())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  message     String
  type        NotificationType
  read        Boolean          @default(false)
  metadata    Json?

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model PreferredDriver {
  id          String   @id @default(uuid())
  driver      User     @relation("DriverToPassenger", fields: [driverId], references: [id], onDelete: Cascade)
  driverId    String
  passenger   User     @relation("PassengerToDriver", fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId String
  whyPrefered String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([driverId, passengerId])
}

model Conversations {
  id String @id @default(uuid())
  driver User @relation(fields: [driverId], references: [id], name: "driverConversations")
  driverId String

  passenger User @relation(fields: [passengerId], references: [id], name: "passengerConversations")
  passengerId String

  rideRequest RideRequest? @relation(fields: [rideRequestId], references: [id], onDelete: SetNull)
  rideRequestId String? @unique

  type ConversationType @default(RIDE_RELATED)

  subject String?
  isResolved Boolean @default(false) //false eshte kur conversation osht aktiv, true kur u kry conversation
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastMessageAt DateTime?

  @@unique([driverId, passengerId, rideRequestId])
  @@index([driverId])
  @@index([passengerId])
  @@index([type])
  @@index([isResolved])
  @@index([lastMessageAt])
  @@index([driverId, isResolved])
}

model Message {
  id String @id @default(uuid())
  conversation Conversations @relation(fields: [conversationId], references: [id])
  conversationId String

  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  senderRole Role
  content String
  mediaUrls String[]
  priceOffer Decimal?
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@index([isRead])
}

enum ConversationType {
  RIDE_RELATED
  SUPPORT
  OTHER
}